<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-lazy-init="true">



	<!-- 自动搜索@Component , @Service , @Repository等标注的类 不搜索@Controller的类 -->
	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.miaotu" annotation-config="true">
	<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 属性值替换 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>





	<!-- MemCache 配置 -->

	<!-- <bean id="builder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder"> 
		<constructor-arg> <bean class="net.rubyeye.xmemcached.utils.AddrUtil" factory-method="getAddresses"> 
		<constructor-arg value="${memached.host}" /> </bean> </constructor-arg> </bean> 
		<bean id="memcachedClient" class="net.rubyeye.xmemcached.MemcachedClient" 
		factory-bean="builder" factory-method="build" destroy-method="shutdown" /> -->
	<!-- <import resource="classpath:simplesm-context.xml" /> <aop:aspectj-autoproxy 
		/> <bean name="defaultSerializationTypeAsString" class="java.lang.String"> 
		<constructor-arg value="#{systemProperties['ssm.defaultSerializationType']?:'PROVIDER'}" 
		/> </bean> <bean name="defaultMemcachedClient" class="com.google.code.ssm.CacheFactory"> 
		<property name="initializeTranscoders" value="true"></property> <property 
		name="cacheClientFactory"> <bean class="com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl" 
		/> </property> <property name="addressProvider"> <bean class="com.google.code.ssm.config.DefaultAddressProvider"> 
		<property name="address" value="${memached.host}" /> </bean> </property> 
		<property name="configuration"> <bean class="com.google.code.ssm.providers.CacheConfiguration"> 
		<property name="consistentHashing" value="true" /> </bean> </property> </bean> -->
	<!-- MemCache 配置 -->

	<!-- **************** druid 监控连接池配置 ***************** -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="10000" />
		<property name="logSlowSql" value="true" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="200" />

		<!-- 对泄漏的连接 自动关闭 -->
		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1200秒，也就是20分钟 -->
		<property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->

		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="mergeStat" /> -->
		<property name="filters" value="stat,wall,log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
		<!-- 慢日志查询 缺省为3秒 修改为10秒 10000 -->
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />

		<!-- DruidDataSource各自独立 ， 支持配置公用监控数据 -->
		<!-- <property name="useGloalDataSourceStat" value="true" /> -->
	</bean>

	<!-- druid 监控 spring -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.miaotu..*.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>

	<!-- druid 支持JMX监控 -->
	<bean id="druid-test-mbeanServer" class="com.alibaba.druid.support.spring.MBeanServerFactoryBean" />

	<bean id="druid-test-exporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="beans">
			<map>
				<entry key="com.alibaba.druid:type=DataSource,name=mysql"
					value-ref="dataSource" />
			</map>
		</property>
		<property name="server" ref="druid-test-mbeanServer" />
	</bean>


	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 配置事务传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>

			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="upd*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="operate*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="*" read-only="true" />
			<!-- <tx:method name="execute*" propagation="REQUIRED" /> -->
		</tx:attributes>
	</tx:advice>

	<!--利用aop 对 下的类事务处理 expression="execution(* com.base..*.service..*.*(..)) -->
	<aop:config>
		<aop:pointcut id="allMethod"
			expression="execution(* com.miaotu.*.*.service..*.*(..))" />
		<aop:advisor pointcut-ref="allMethod" advice-ref="txAdvice" />
	</aop:config>

	<!-- mybatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath*:/com/miaotu/*/mapper/*.xml" />
	</bean>

	<!-- 使用SqlSession形式 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- Spring JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="baseJdbcDao" class="com.miaotu.common.dao.BaseJdbcDaoSupport">
		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate" />
		</property>
	</bean>
<!-- 
  	<import resource="classpath:simplesm-context.xml" />
 
    <import resource="spring-xmemcached.xml" />
 -->
</beans>