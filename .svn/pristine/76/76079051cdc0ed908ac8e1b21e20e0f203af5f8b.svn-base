package com.miaotu.common.util;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.miaotu.common.response.JsonResponse;
import com.miaotu.common.service.ImageService;
import com.miaotu.common.service.pojo.Images;
import com.miaotu.common.service.vo.ImageInfo;

/**
 * 父类Controller
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Author: 黎杰 2013-8-23 下午05:47:05
 * </p>
 * <p>
 * Department: 技术部
 * </p>
 * <p>
 * Copyright: @2009-2013 湖南金诚信通信股份有限公司
 * </p>
 * 
 */
public abstract  class SuperController {

	@Resource
	public ImageService imageService;
	
	
	/**
	 * 把信息放入session.
	 * 
	 * @param request
	 *            the request
	 * @param attributeKey
	 *            the attribute key
	 * @param obj
	 *            the obj
	 */
	public void putSession(final HttpServletRequest request,
			final String attributeKey, final Object obj) {
		request.getSession().setAttribute(attributeKey, obj);
	}

	/**
	 * 从session中取得信息.
	 * 
	 * @param request
	 *            the request
	 * @param attributeKey
	 *            the attribute key
	 * @return the session
	 */
	public Object getSession(final HttpServletRequest request,
			final String attributeKey) {
		return request.getSession().getAttribute(attributeKey);
	}

	/**
	 * 从request或session中移除对象
	 * 
	 * @param request
	 * @param key
	 */
	public void removeSession(HttpServletRequest request, String key) {
		request.removeAttribute(key);
		request.getSession().removeAttribute(key);
	}

	@InitBinder
	public void  initBinder(WebDataBinder binder){
		binder.registerCustomEditor(Date.class, new  CustomDateEditor(new  SimpleDateFormat("yyyy-MM-dd"), true));
		//binder.registerCustomEditor(MultipartFile.class, new ByteArrayMultipartFileEditor());
	}
	/**
	 * 获取项目路径
	 * 
	 * @param request
	 * @return
	 */
	public String getBasePath(HttpServletRequest request) {
		return request.getScheme() + "://" + request.getServerName() + ":"
				+ request.getServerPort() + request.getContextPath();
	}

	//获取项目绝对路径
	public String getImageLocalPath(HttpServletRequest request)
	{
		String logoRealPathDir = request.getSession().getServletContext()
				.getRealPath("/")+ConstantUtils.LOCAL_IMAGE_MDR;
		return logoRealPathDir;
	}

	/**
	 * 获取用户IP
	 * @Title: getRemortIP 
	 * @Description: TODO
	 * @param @param request
	 * @param @return    设定文件 
	 * @return String    返回类型 
	 * @throws
	 */
	public String getRemortIP(HttpServletRequest request) {			 
		String ip = request.getHeader("x-forwarded-for");
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("WL-Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
		}
		return ip;
	}

	//@ResponseBody
	//@RequestMapping(value ="/uploadfiles",method = RequestMethod.POST)  
	public List<ImageInfo> uploadfiles(Images images,HttpServletRequest request) throws IOException  { 

		//		JsonResponse  jsonResponse = new JsonResponse();
		List<ImageInfo> imageList = new ArrayList<ImageInfo>();
		//创建一个通用的多部分解析器  
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());  
		//判断 request 是否有文件上传,即多部分请求  
		if(multipartResolver.isMultipart(request)){  
			//转换成多部分request    
			MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest)request;  
			//取得request中的所有文件名  
			Iterator<String> iter = multiRequest.getFileNames();  
			while(iter.hasNext()){  
				//取得上传文件  
				MultipartFile file = multiRequest.getFile(iter.next());  
				if(file != null){  
					//取得当前上传文件的文件名称  
					String myFileName = file.getOriginalFilename();  

					String saveName  = System.currentTimeMillis()+myFileName;
					//如果名称不为“”,说明该文件存在，否则说明该文件不存在  
					if(myFileName.trim() !=""){  
						String realPath =getImageLocalPath(request);
						InputStream ImageIo = null;
						ImageInfo imageInfo  = new ImageInfo();
						ImageIo =  file.getInputStream();
						BufferedImage buff = ImageIO.read(ImageIo);
						imageInfo.setWidth(buff.getWidth());//得到图片的宽度
						imageInfo.setHeight(buff.getHeight());  //得到图片的高
						imageInfo.setCampaign_id(images.getCampaign_id());
						imageInfo.setCommodity_id(images.getCommodity_id());
						imageInfo.setUser_id(images.getUser_id());
						imageInfo.setTopic_id(images.getTopic_id());
						imageInfo.setSize(file.getSize());
						imageInfo.setName(myFileName);
						imageInfo.setSave_name(saveName);
						imageInfo.setUrl(this.getUrl(request, ConstantUtils.IMAGE_MDR,saveName));
						FileUtils.copyInputStreamToFile(file.getInputStream(), new File(
								realPath, saveName));
						if(null!=ImageIo) ImageIo.close();
						imageList.add(imageInfo);
					}  
				}  

			}  
		}  
		return imageList;
	}

	public List<String> deletefiles(Images images,HttpServletRequest request)  
	{  
 
		List<String> listName = new ArrayList<String>();
		List<ImageInfo> imageList = imageService.selectImages(images);

		for(ImageInfo imageInfo : imageList)
		{
			String path  =  getImageLocalPath(request)+"/"+imageInfo.getFormat();
			if(!FileUtil.DeleteFolder(path))
			{
				listName.add(imageInfo.getSave_name());
			}
			else
			{
				imageService.deleteImageforName(imageInfo.getSave_name());
			}
		}
		return listName;
	}


	public String getUrl(HttpServletRequest request,String savadir,String filename)
	{
		String url = "";

		url = request.getScheme() +"://" + request.getServerName()
				+ ":" +request.getServerPort()+ "/"+savadir+"/"+filename;
		
		return url;
	}
	/** 
	 * 异常页面控制 
	 *  
	 * @param runtimeException 
	 * @return 
	 */  
	@ExceptionHandler(RuntimeException.class)  
	public @ResponseBody  JsonResponse runtimeExceptionHandler(RuntimeException runtimeException) { 
		runtimeException.printStackTrace();
		JsonResponse  jsonResponse = new JsonResponse();
		jsonResponse.setErrorNo(Command.System_Error);
		jsonResponse.setErrorContent(Command.System_Error_String+ "  : "+runtimeException.toString());
		this.consoleException(jsonResponse);
		return jsonResponse;  
	}  
	public abstract void consoleException(JsonResponse  jsonResponse);
}
