package com.miaotu.supply.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.miaotu.activities.vo.AdminUser;
import com.miaotu.supply.pojo.SupplyParams;
import com.miaotu.supply.service.SupplyService;
import com.miaotu.supply.vo.SupplyInfo;
import com.miaotu.util.PicJsonPojo;

@Controller
@RequestMapping("/supply")
public class SupplyController {
	private static final Logger logger=LoggerFactory.getLogger(SupplyController.class);
	@Autowired
	private SupplyService supplyService;
	/**
	 * 一页显示条数
	 */		
	private Integer number=10;
	
	/**
	 * 起始数
	 */
	private Integer starNumber=0;
	
	/**
	 * 总页数  
	 */
	private Integer pageCount=1;
	
	/**
	 * 供应总数
	 */
	private Integer custCount=0;
	
	/**
	 * 当前页数
	 */
	private Integer pageNow =0;
	
	/**
	 * 跳转至评论页面
	 * @param request
	 * @return
	 */
	@RequestMapping("/toSupplyCommentList.do")
	public String toSupplyCommentList(HttpServletRequest request){
		HttpSession session = request.getSession();
		String entityId = request.getParameter("entityId");
		session.setAttribute("supplyIdforPage", entityId);
		return "redirect:/supplyComment/toSupplyCommentList.do";
		
	}
	
	/**
	 * index页面查询下一页供应
	 * @param request
	 * @return
	 */
	@RequestMapping("/selectNextPage.do")
	public String selectNextPage(HttpServletRequest request){
		pageNow+=1;
		return "redirect:/supply/toSupplyList.do";
	}
	
	/**
	 * index页面查询下一页供应
	 * @param request
	 * @return
	 */
	@RequestMapping("/selectLastPage.do")
	public String selectLastPage(HttpServletRequest request){
		if(pageNow>0){
			pageNow-=1;
		}
		return "redirect:/supply/toSupplyList.do";
	}
	
	/**
	 * 置顶
	 * @param request
	 * @return
	 */
	@RequestMapping("/setTop.do")
	public String setTop(HttpServletRequest request){
		String entityId = request.getParameter("entityId");
		if(StringUtils.isNotEmpty(entityId)){
			Integer isTop = supplyService.getTopActivities();
			SupplyParams supplyParams = new SupplyParams();
			supplyParams.setIsTop(isTop+1);
			supplyParams.setSupply_id(new Integer(entityId));
			this.supplyService.editSupplyActivities(supplyParams);
		}
		return "redirect:/supply/toSupplyList.do";
	}
	
	/**
	 * 取消置顶
	 * @param request
	 * @return
	 */
	@RequestMapping("/cancelTop.do")
	public String cancelTop(HttpServletRequest request){
		String entityId = request.getParameter("entityId");
		if(StringUtils.isNotEmpty(entityId)){
			boolean cancelTop = supplyService.cancelTopActivities(new Integer(entityId));
		}
		return "redirect:/supply/toSupplyList.do";
	}
	
	/**
	 * 跳转到供應列表页面
	 * 
	 * @param request
	 * @return
	 * @throws IOException 
	 * @throws JsonMappingException 
	 * @throws JsonParseException 
	 */
	@RequestMapping("/toSupplyList.do")  
	public String toPublishActivityList(HttpServletRequest request) throws JsonParseException, JsonMappingException, IOException{
		String returnStr="/jsp/supply/supplyList";
		HttpSession session = request.getSession();
		AdminUser userinfo = (AdminUser)session.getAttribute("user");
		if(null!=userinfo){
			String pageCountt = request.getParameter("pageCountt");
			String entityStatus = request.getParameter("entityStatus");
			String starTime = request.getParameter("starTime");
			String endTime = request.getParameter("endTime");
			if(StringUtils.isNotEmpty(pageCountt)){
				pageNow = new Integer(pageCountt)-1;
			}
			SupplyParams params = new SupplyParams();
			params.setVarieties(request.getParameter("selectVarieties"));
			if(StringUtils.isNotEmpty(request.getParameter("selectUserId"))){
				params.setUser_id(new Integer(request.getParameter("selectUserId")));
			}
			if(StringUtils.isNotEmpty(entityStatus)){
				params.setStatus(new Integer(entityStatus));
			}
			params.setStarTime(starTime);
			params.setEndTime(endTime);
			params.setNum(number);
			if(null!=pageNow&&pageNow>=0){
				starNumber = pageNow*number;
			}
			params.setStarNumber(starNumber);
			List<SupplyInfo> infoList = this.supplyService.getSupplyInfoActivities(params);
			for (SupplyInfo supplyInfo : infoList) {
				List<PicJsonPojo> picList = initEntity(supplyInfo);
				supplyInfo.setPicList(picList);
				if(null!=picList&&picList.size()>0){
					supplyInfo.setSupply_url(picList.get(0).getT_url());
				}
			}
			custCount = this.supplyService.getCountSupplyInfoActivities(params);
			Double c = Math.ceil(custCount/number.doubleValue());
			pageCount = c.intValue();
			request.setAttribute("infoList", infoList);
			request.setAttribute("pageCount", pageCount);
			request.setAttribute("number", number);
			request.setAttribute("starNumber", starNumber);
			request.setAttribute("custCount", custCount);
			request.setAttribute("pageNow", pageNow);
			request.setAttribute("selectVarieties", request.getParameter("selectVarieties"));
			request.setAttribute("selectUserId", request.getParameter("selectUserId"));
			request.setAttribute("starTime", starTime);
			request.setAttribute("endTime", endTime);
			request.setAttribute("entityStatus", params.getStatus());
		}else{
			returnStr = "login";
		}
		return returnStr;
	}

	private List<PicJsonPojo> initEntity(SupplyInfo supplyInfo) throws IOException, JsonParseException, JsonMappingException {
		String supply_url = supplyInfo.getSupply_url();
		List<PicJsonPojo> picList = new ArrayList<PicJsonPojo>();
		if(StringUtils.isNotEmpty(supply_url)){
			ObjectMapper mapper = new ObjectMapper();  
			JavaType javaType =mapper.getTypeFactory().constructParametricType(ArrayList.class, PicJsonPojo.class);
			picList =  (List<PicJsonPojo>)mapper.readValue(supply_url, javaType);
		}
		return picList;
	}
	
	
	/**
	 * 改变供应状态
	 * @param request
	 * @return
	 */
	@RequestMapping("/supplychangeStauts.do")
	public String supplychangeStauts(HttpServletRequest request,String allIDCheck,RedirectAttributes attr) {
	  String [] userIds = allIDCheck.split(",");
	  boolean isdelete = true;
	  if(null!=userIds&&userIds.length>0){
		  for (String uid : userIds) {
			  isdelete = this.supplyService.changeStautsActivities(new Integer(uid));
			  if(!isdelete){
					break;
				}
		}
	  }
	  if(isdelete){
		  attr.addAttribute("message", "操作成功");
		}else{
			attr.addAttribute("message", "操作失败");
		}
	 return "redirect:/supply/toSupplyList.do";
	}
	
	
	/**
	 * 供应编辑页面
	 * @param request
	 * @return
	 * @throws IOException 
	 * @throws JsonMappingException 
	 * @throws JsonParseException 
	 */
	@RequestMapping("/toSupplyEdit.do")  
	public String toSupplyEdit(HttpServletRequest request) throws JsonParseException, JsonMappingException, IOException{
		String returnStr="/jsp/supply/supplyEdit";
		HttpSession session = request.getSession();
		AdminUser userinfo = (AdminUser)session.getAttribute("user");
		List<PicJsonPojo> picList = new ArrayList<PicJsonPojo>();
		if(null!=userinfo){
			//获得供应ID
			SupplyInfo entityInfo = new SupplyInfo();
			String supplyId = request.getParameter("entityId");
			if(StringUtils.isNotEmpty(supplyId)){
				entityInfo = this.supplyService.getSupplyInfoByIdActivities(new Integer(supplyId));
				picList = initEntity(entityInfo);
			}
			request.setAttribute("entityInfo", entityInfo);
			request.setAttribute("picList", picList);
		}else{
			returnStr = "login";
		}
		return returnStr;
	}
	
	
	/**
	 * 供应编辑提交逻辑
	 * @param request
	 * @return
	 */
	@RequestMapping("/toSupplySubmit.do")  
	@ResponseBody
	public Map toSupplySubmit(HttpServletRequest request,@RequestBody  SupplyParams pars){
		Map<String,String> map = new HashMap<String,String>();
		try{
			request.setCharacterEncoding("UTF-8");
			ObjectMapper mapper = new ObjectMapper();
			List<PicJsonPojo> picList = new ArrayList<PicJsonPojo>();
			HttpSession session = request.getSession();
			AdminUser userinfo = (AdminUser)session.getAttribute("user");
			boolean isadd;
			if(null!=userinfo){
				//判断是否新增
				if(null!=pars.getSupply_id()&&pars.getSupply_id()>0){
					SupplyInfo entityInfo = this.supplyService.getSupplyInfoByIdActivities(pars.getSupply_id());
					//判断原数据是否有图片
					if(StringUtils.isNotEmpty(entityInfo.getSupply_url())){
						JavaType javaType =mapper.getTypeFactory().constructParametricType(ArrayList.class, PicJsonPojo.class);
						//获得原来的图片列表
						picList =  (List<PicJsonPojo>)mapper.readValue(entityInfo.getSupply_url(), javaType);
						//判断是否是删除 
						if(StringUtils.isNotEmpty(pars.getIsdelete())){
							String[]delete = pars.getIsdelete().split(",");
							int i=0;
							for (String deleteTag : delete) {
								if(0==i){
									picList.remove(new Integer(deleteTag).intValue()-1);
								}else{
									picList.remove(new Integer(deleteTag).intValue()-1-i);
								}
								i++;
							}
						}else{//修改
							if(StringUtils.isNotEmpty(pars.getSupply_url())){
								intPicList(pars.getSupply_url(), picList);
							}
						}
						pars.setSupply_url(mapper.writeValueAsString(picList));
					}else{
						if(StringUtils.isNotEmpty(pars.getSupply_url())){
							intPicList(pars.getSupply_url(), picList);
							pars.setSupply_url(mapper.writeValueAsString(picList));
						}
					}
					isadd = this.supplyService.editSupplyActivities(pars);
				}else{
					if(StringUtils.isNotEmpty(pars.getSupply_url())){
						intPicList(pars.getSupply_url(), picList);
						pars.setSupply_url(mapper.writeValueAsString(picList));
					}
					isadd = this.supplyService.addSupplyActivities(pars);
				}
				if(isadd){
					map.put("message", "操作供应成功");
				}else{
					map.put("message", "操作供应失败");
				}
				
			}
		}catch(Exception e){
			map.put("message", "操作供应失败");
		}
		return map;
	}

	/**
	 * 加载链接
	 * @param url
	 * @param picList
	 */
	private void intPicList(String url, List<PicJsonPojo> picList) {
		//获取前台传过来的url组
		String[] urls = url.split(",");
		int k = 6-picList.size();
		for(int i=0;i<k;i++){
			if(urls.length>i){
				PicJsonPojo pojo = new PicJsonPojo();
				pojo.setT_url(urls[i]);
				picList.add(pojo);	
			}
			
		}
	}
	public static void main(String[] args) {
		String aa = "/content/content_1462351780641.jpg,/content/content_1462351787713.jpg,";
		String[] bb = aa.split(",");
		System.out.println(bb.length);
		for (String cc : bb) {
			System.out.println(cc);
		}
	}

}
