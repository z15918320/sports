package com.miaotu.publishTheme.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.miaotu.activities.vo.AdminUser;
import com.miaotu.publishTheme.pojo.PublishThemeParams;
import com.miaotu.publishTheme.service.PublishThemeService;
import com.miaotu.publishTheme.vo.PublishThemeInfo;

@Controller
@RequestMapping("/publishTheme")
public class PublishThemeController{
	private static final Logger logger=LoggerFactory.getLogger(PublishThemeController.class);
	/**
	 * 一页显示条数
	 */
	private Integer number=10;
	
	/**
	 * 起始数
	 */
	private Integer starNumber=0;
	
	/**
	 * 总页数  
	 */
	private Integer pageCount=1;
	
	/**
	 * 用户总数
	 */
	private Integer custCount=0;
	
	/**
	 * 当前页数
	 */
	private Integer pageNow =0;
	
	String entityStatus="";
	String starTime;
	String endTime;
	String pageCountt;
	
	@Autowired
	private PublishThemeService service;
	
	/**
	 * index页面查询下一页用户
	 * @param request
	 * @return
	 */
	@RequestMapping("/selectNextPage.do")
	public String selectNextPage(HttpServletRequest request){
		pageNow+=1;
		return "redirect:/publishTheme/toPublishThemeList.do";
	}
	
	/**
	 * index页面查询下一页用户
	 * @param request
	 * @return
	 */
	@RequestMapping("/selectLastPage.do")
	public String selectLastPage(HttpServletRequest request){
		if(pageNow>0){
			pageNow-=1;
		}
		return "redirect:/publishTheme/toPublishThemeList.do";
	}
	
	
	@RequestMapping("/toPublishThemeList.do")  
	public String toPublishThemeList(HttpServletRequest request){
		String returnStr="/jsp/publishTheme/publishThemeList";
		HttpSession session = request.getSession();
		AdminUser userinfo = (AdminUser)session.getAttribute("user");
		if(null!=userinfo){
			if(StringUtils.isNotEmpty(request.getParameter("entityStatus"))){
				entityStatus = request.getParameter("entityStatus");
			}
			if(StringUtils.isNotEmpty(request.getParameter("starTime"))){
				starTime = request.getParameter("starTime");
			}else{
				starTime=null;
			}
			if(StringUtils.isNotEmpty(request.getParameter("endTime"))){
				endTime = request.getParameter("endTime");
			}else{
				endTime=null;
			}
			if(StringUtils.isNotEmpty(request.getParameter("pageCountt"))){
				pageCountt = request.getParameter("pageCountt");
			}
			if(StringUtils.isNotEmpty(pageCountt)){
				pageNow = new Integer(pageCountt)-1;
			}
			PublishThemeParams par = new PublishThemeParams();
			par.setNum(number);
			if(StringUtils.isNotEmpty(request.getParameter("selectUserId"))){
				par.setUser_id(new Integer(request.getParameter("selectUserId")));
			}
			if(StringUtils.isNotEmpty(entityStatus.trim())){
				par.setStatus(new Integer(entityStatus));
			}else{
				par.setStatus(null);
			}
			par.setStarTime(starTime);
			par.setEndTime(endTime);
			if(null!=pageNow&&pageNow>=0){
				starNumber = pageNow*number;
			}
			par.setStarNumber(starNumber);
			List<PublishThemeInfo> infoList = this.service.getEntityInfoActivities(par);
			custCount = this.service.getCountEntityInfoActivities(par);
			Double c = Math.ceil(custCount/number.doubleValue());
			pageCount = c.intValue();
			request.setAttribute("infoList", infoList);
			request.setAttribute("pageCount", pageCount);
			request.setAttribute("number", number);
			request.setAttribute("starNumber", starNumber);
			request.setAttribute("custCount", custCount);
			request.setAttribute("pageNow", pageNow);
			request.setAttribute("selectUserId", request.getParameter("selectUserId"));
			request.setAttribute("starTime", starTime);
			request.setAttribute("endTime", endTime);
			request.setAttribute("entityStatus", par.getStatus());
		}else{
			returnStr = "login";
		}
		return returnStr;
	}
	
	/**
	 * 改变状态
	 * @param request
	 * @return
	 */
	@RequestMapping("/publishThemechangeStauts.do")
	public String publishThemechangeStauts(HttpServletRequest request,String allIDCheck,RedirectAttributes attr) {
	  String [] ids = allIDCheck.split(",");
	  boolean isdelete = true;
	  if(null!=ids&&ids.length>0){
		  for (String uid : ids) {
			  isdelete = this.service.changeStautsActivities(new Integer(uid));
			  if(!isdelete){
					break;
				}
		}
	  }
	  if(isdelete){
		  attr.addAttribute("message", "操作成功");
		}else{
			attr.addAttribute("message", "操作失败");
		}
	 return "redirect:/publishTheme/toPublishThemeList.do";
	}
	
	
	/**
	 * 编辑页面
	 * @param request
	 * @return
	 */
	@RequestMapping("/toPublishThemeEdit.do")  
	public String toPublishThemeEdit(HttpServletRequest request){
		String returnStr="/jsp/publishTheme/publishThemeEdit";
		HttpSession session = request.getSession();
		AdminUser userinfo = (AdminUser)session.getAttribute("user");
		if(null!=userinfo){
			//获得供应ID
			String entityId = request.getParameter("entityId");
			if(StringUtils.isNotEmpty(entityId)){
				PublishThemeInfo entityInfo = this.service.getEntityInfoByIdActivities(new Integer(entityId));
				request.setAttribute("entityInfo", entityInfo);
			}
		}else{
			returnStr = "login";
		}
		return returnStr;
	}
	
	/**
	 * 供应编辑提交逻辑
	 * @param request
	 * @return
	 */
	@RequestMapping("/toPublishThemeSubmit.do")  
	@ResponseBody
	public Map toPublishThemeSubmit(HttpServletRequest request,@RequestBody  PublishThemeParams pars){
		Map<String,String> map = new HashMap<String,String>();
		try{
			request.setCharacterEncoding("UTF-8");
			HttpSession session = request.getSession();
			AdminUser userinfo = (AdminUser)session.getAttribute("user");
			boolean isadd;
			if(null!=userinfo){
				if(null!=pars.getTheme_id()&&pars.getTheme_id()>0){
					isadd = this.service.editEntityActivities(pars);
				}else{
					isadd = this.service.addEntityActivities(pars);
				}
				if(isadd){
					map.put("message", "操作成功");
				}else{
					map.put("message", "操作失败");
				}
			}
		}catch(Exception e){
			map.put("message", "操作失败");
		}
		return map;
	}
	
}
